
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package uy.edu.um;
import java_cup.runtime.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\003\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\003\034" +
    "\000\002\003\037\000\002\003\037\000\002\004\005\000" +
    "\002\004\006\000\002\005\005\000\002\005\006\000\002" +
    "\006\003\000\002\006\005\000\002\007\013\000\002\010" +
    "\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\004\004\005\001\002\000\012\002\071\004" +
    "\005\017\065\020\066\001\002\000\004\027\007\001\002" +
    "\000\012\002\000\004\000\017\000\020\000\001\002\000" +
    "\004\005\010\001\002\000\004\022\011\001\002\000\004" +
    "\030\012\001\002\000\004\032\063\001\002\000\006\006" +
    "\015\030\014\001\002\000\004\032\061\001\002\000\004" +
    "\022\016\001\002\000\004\032\017\001\002\000\004\026" +
    "\057\001\002\000\006\007\022\032\021\001\002\000\004" +
    "\026\055\001\002\000\004\022\023\001\002\000\004\032" +
    "\024\001\002\000\004\030\025\001\002\000\004\010\026" +
    "\001\002\000\004\022\027\001\002\000\004\032\030\001" +
    "\002\000\004\011\031\001\002\000\004\022\032\001\002" +
    "\000\004\032\033\001\002\000\004\012\034\001\002\000" +
    "\004\022\035\001\002\000\004\024\036\001\002\000\004" +
    "\030\037\001\002\000\006\023\ufff5\025\ufff5\001\002\000" +
    "\006\023\041\025\042\001\002\000\004\030\054\001\002" +
    "\000\004\014\043\001\002\000\004\022\044\001\002\000" +
    "\004\030\045\001\002\000\016\002\ufffc\004\ufffc\013\046" +
    "\015\047\017\ufffc\020\ufffc\001\002\000\004\022\052\001" +
    "\002\000\004\022\050\001\002\000\004\030\051\001\002" +
    "\000\012\002\ufffa\004\ufffa\017\ufffa\020\ufffa\001\002\000" +
    "\004\030\053\001\002\000\012\002\ufffb\004\ufffb\017\ufffb" +
    "\020\ufffb\001\002\000\006\023\ufff4\025\ufff4\001\002\000" +
    "\004\027\056\001\002\000\006\007\ufff6\032\ufff6\001\002" +
    "\000\004\027\060\001\002\000\006\007\ufff7\032\ufff7\001" +
    "\002\000\004\031\062\001\002\000\006\006\ufff8\030\ufff8" +
    "\001\002\000\004\031\064\001\002\000\006\006\ufff9\030" +
    "\ufff9\001\002\000\004\022\077\001\002\000\004\027\073" +
    "\001\002\000\012\002\uffff\004\uffff\017\uffff\020\uffff\001" +
    "\002\000\012\002\ufffe\004\ufffe\017\ufffe\020\ufffe\001\002" +
    "\000\004\002\001\001\002\000\012\002\ufffd\004\ufffd\017" +
    "\ufffd\020\ufffd\001\002\000\004\023\074\001\002\000\004" +
    "\021\075\001\002\000\004\032\076\001\002\000\012\002" +
    "\ufff2\004\ufff2\017\ufff2\020\ufff2\001\002\000\004\032\100" +
    "\001\002\000\004\023\101\001\002\000\004\016\102\001" +
    "\002\000\004\022\103\001\002\000\004\024\104\001\002" +
    "\000\004\030\037\001\002\000\006\023\041\025\106\001" +
    "\002\000\012\002\ufff3\004\ufff3\017\ufff3\020\ufff3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\006\002\003\003\005\001\001\000\010\003" +
    "\066\007\067\010\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\104\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public HashMap<String, HashMap<String, Object>> recetas = new HashMap<>();
    public HashMap<String, Integer> resumenDificultad = new HashMap<>();
    public double totalCalorias = 0;
    public int cantRecetas = 0;

    public void report_error(String message, Object info) {
        System.err.println("❌ Error sintáctico: " + message);
        if (info instanceof Symbol) {
            Symbol s = (Symbol) info;
            System.err.println("   en línea " + (s.left+1) + ", columna " + (s.right+1));
        }
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= recetario EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // recetario ::= receta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recetario",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // recetario ::= recetario receta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recetario",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // recetario ::= recetario carrito 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recetario",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // recetario ::= recetario menu 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recetario",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // receta ::= RECETA STRING INGREDIENTES COL ingredientes PASOS COL pasos TIEMPO COL NUM ID PORCIONES COL NUM CALORIAS COL NUM CATEGORIAS COL SO lista_ids SC DIFICULTAD COL ID 
            {
              HashMap<String,Object> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		HashMap<String,String> ing = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int unidad_tiempoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int unidad_tiemporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		String unidad_tiempo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Double por = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int calleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int calright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Double cal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int catsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int catsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<String> cats = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int difleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int difright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        HashMap<String,Object> receta = new HashMap<>();
        receta.put("ingredientes", ing);
        receta.put("pasos", p);
        receta.put("tiempo", t + " " + unidad_tiempo);
        receta.put("porciones", por);
        receta.put("calorias", cal);
        receta.put("categorias", cats);
        receta.put("dificultad", dif);
        parser.recetas.put(s, receta);

        parser.totalCalorias += cal;
        parser.cantRecetas++;
        parser.resumenDificultad.put(dif, parser.resumenDificultad.getOrDefault(dif, 0) + 1);
        System.out.println("✅ Receta cargada: " + s + " (" + dif + ", " + cal + " cal)");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receta",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // receta ::= RECETA STRING INGREDIENTES COL ingredientes PASOS COL pasos TIEMPO COL NUM ID PORCIONES COL NUM CALORIAS COL NUM CATEGORIAS COL SO lista_ids SC DIFICULTAD COL ID ORIGEN COL ID 
            {
              HashMap<String,Object> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-27)).value;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		HashMap<String,String> ing = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int unidad_tiempoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int unidad_tiemporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String unidad_tiempo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Double por = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int calleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int calright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Double cal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int catsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int catsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> cats = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int difleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int difright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int orileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oriright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ori = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        HashMap<String,Object> receta = new HashMap<>();
        receta.put("ingredientes", ing);
        receta.put("pasos", p);
        receta.put("tiempo", t + " " + unidad_tiempo);
        receta.put("porciones", por);
        receta.put("calorias", cal);
        receta.put("categorias", cats);
        receta.put("dificultad", dif);
        receta.put("origen", ori);
        parser.recetas.put(s, receta);

        parser.totalCalorias += cal;
        parser.cantRecetas++;
        parser.resumenDificultad.put(dif, parser.resumenDificultad.getOrDefault(dif, 0) + 1);
        System.out.println("✅ Receta cargada: " + s + " (" + dif + ", " + ori + ", " + cal + " cal)");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receta",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // receta ::= RECETA STRING INGREDIENTES COL ingredientes PASOS COL pasos TIEMPO COL NUM ID PORCIONES COL NUM CALORIAS COL NUM CATEGORIAS COL SO lista_ids SC DIFICULTAD COL ID TIPO COL ID 
            {
              HashMap<String,Object> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-27)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-27)).value;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)).right;
		HashMap<String,String> ing = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-24)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-18)).value;
		int unidad_tiempoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int unidad_tiemporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String unidad_tiempo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Double por = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int calleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int calright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Double cal = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int catsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int catsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> cats = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int difleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int difright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dif = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        HashMap<String,Object> receta = new HashMap<>();
        receta.put("ingredientes", ing);
        receta.put("pasos", p);
        receta.put("tiempo", t + " " + unidad_tiempo);
        receta.put("porciones", por);
        receta.put("calorias", cal);
        receta.put("categorias", cats);
        receta.put("dificultad", dif);
        receta.put("tipo", tipo);
        parser.recetas.put(s, receta);

        parser.totalCalorias += cal;
        parser.cantRecetas++;
        parser.resumenDificultad.put(dif, parser.resumenDificultad.getOrDefault(dif, 0) + 1);
        System.out.println("✅ Receta cargada: " + s + " (" + tipo + ", " + dif + ", " + cal + " cal)");
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receta",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-28)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ingredientes ::= ID NUM UNIDAD 
            {
              HashMap<String,String> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ing = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    HashMap<String, String> list = new HashMap<>();
                    list.put(ing, c + " " + u);
                    RESULT = list;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingredientes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ingredientes ::= ingredientes ID NUM UNIDAD 
            {
              HashMap<String,String> RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,String> prev = (HashMap<String,String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ing = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    prev.put(ing, c + " " + u);
                    RESULT = prev;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingredientes",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pasos ::= NUM PTO STRING 
            {
              ArrayList<String> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int descright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ArrayList<String> list = new ArrayList<>();
            list.add(n.intValue() + ". " + desc);
            RESULT = list;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pasos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pasos ::= pasos NUM PTO STRING 
            {
              ArrayList<String> RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<String> prev = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int descleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int descright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String desc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            prev.add(n.intValue() + ". " + desc);
            RESULT = prev;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pasos",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_ids ::= ID 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ArrayList<String> list = new ArrayList<>();
                list.add(s);
                RESULT = list;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ids",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_ids ::= lista_ids CM ID 
            {
              ArrayList<String> RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> prev = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                prev.add(s);
                RESULT = prev;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ids",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // carrito ::= CARRITO COL NUM CM RECETAS COL SO lista_ids SC 
            {
              Object RESULT =null;
		int persleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int persright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double pers = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int recleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int recright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> rec = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              System.out.println("\n🛒 CARRITO PARA " + pers.intValue() + " PERSONAS");
              for(String r : rec){
                  if(!parser.recetas.containsKey(r))
                      System.out.println("   ⚠️ Receta no encontrada: " + r);
                  else
                      System.out.println("   ✓ " + r);
              }
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("carrito",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // menu ::= MENU STRING CM CALORIAS_EQ NUM 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double max = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            System.out.println("\n📅 MENÚ TIPO: " + tipo);
            System.out.println("Máximo de calorías/día: " + max);
            System.out.println("Promedio de calorías por receta: " + (parser.totalCalorias / parser.cantRecetas));
            System.out.println("Distribución por dificultad: " + parser.resumenDificultad);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("menu",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
