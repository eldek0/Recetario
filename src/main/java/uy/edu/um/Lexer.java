// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/java/uy/edu/um/lexer.jflex

package uy.edu.um;
import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\4\1\0"+
    "\1\5\11\0\1\6\1\0\1\7\1\10\12\11\1\12"+
    "\2\0\1\13\3\0\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\21\1\23\2\21\1\24\1\25\1\26"+
    "\1\27\1\30\1\21\1\31\1\32\1\33\1\34\5\21"+
    "\1\35\1\0\1\36\1\0\1\21\1\0\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\21"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\21\1\56"+
    "\1\57\1\60\1\61\4\21\1\62\12\0\1\3\73\0"+
    "\1\21\7\0\1\21\3\0\1\21\3\0\1\21\1\0"+
    "\1\21\6\0\1\21\1\0\1\21\4\0\1\21\7\0"+
    "\1\21\3\0\1\63\3\0\1\21\1\0\1\21\6\0"+
    "\1\21\1\0\1\21\u012b\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\11\10\1\11\1\12\2\10\1\13\4\10"+
    "\1\0\1\14\1\2\1\0\15\10\1\0\3\10\1\5"+
    "\17\10\1\0\11\10\1\15\1\16\7\10\1\0\2\10"+
    "\1\13\14\10\1\17\1\0\10\10\1\20\1\10\1\21"+
    "\2\10\1\0\7\10\1\22\1\10\1\23\1\24\1\13"+
    "\2\10\1\25\5\10\1\26\1\27\7\10\1\30\1\31"+
    "\1\32\2\10\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\64\0\64\0\320\0\u0104"+
    "\0\64\0\64\0\u0138\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c"+
    "\0\u0270\0\u02a4\0\u02d8\0\64\0\64\0\u030c\0\u0340\0\u0138"+
    "\0\u0374\0\u03a8\0\u03dc\0\u0410\0\234\0\64\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u07ec\0\u0478\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64"+
    "\0\u0c98\0\u0ccc\0\u0d00\0\u0138\0\64\0\u0d34\0\u0d68\0\u0d9c"+
    "\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc"+
    "\0\u1110\0\u1144\0\u1178\0\u11ac\0\64\0\u11e0\0\u1214\0\u1248"+
    "\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\64\0\u13b4"+
    "\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554"+
    "\0\u1588\0\u15bc\0\u15f0\0\64\0\u1624\0\u0138\0\64\0\64"+
    "\0\u1658\0\u168c\0\64\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\64\0\64\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8"+
    "\0\u18fc\0\64\0\64\0\64\0\u1930\0\u1964\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\13\1\14\1\15\3\13\1\16"+
    "\1\13\1\17\1\13\1\20\1\21\1\22\1\13\1\23"+
    "\1\13\1\24\1\25\1\26\1\13\1\27\3\13\1\30"+
    "\2\13\1\31\1\30\1\32\2\13\1\33\2\13\1\34"+
    "\1\30\2\13\65\0\2\3\1\0\1\3\57\0\5\35"+
    "\1\36\56\35\10\0\1\37\62\0\1\40\1\0\1\10"+
    "\66\0\21\13\2\0\25\13\14\0\1\41\20\13\2\0"+
    "\1\42\24\13\14\0\21\13\2\0\10\13\1\43\14\13"+
    "\14\0\12\13\1\44\6\13\2\0\25\13\14\0\4\13"+
    "\1\45\14\13\2\0\25\13\14\0\1\13\1\46\17\13"+
    "\2\0\1\13\1\47\15\13\1\50\5\13\14\0\1\51"+
    "\20\13\2\0\15\13\1\52\7\13\14\0\4\13\1\53"+
    "\14\13\2\0\4\13\1\54\20\13\14\0\21\13\2\0"+
    "\10\13\1\55\14\13\4\0\1\56\7\0\21\13\2\0"+
    "\25\13\14\0\21\13\2\0\22\13\1\57\2\13\14\0"+
    "\21\13\2\0\6\13\1\30\16\13\14\0\21\13\2\0"+
    "\12\13\1\30\12\13\14\0\21\13\2\0\10\13\1\60"+
    "\14\13\14\0\21\13\2\0\1\61\24\13\2\37\2\0"+
    "\60\37\11\0\1\62\66\0\10\13\1\63\4\13\1\64"+
    "\3\13\2\0\25\13\14\0\21\13\2\0\12\13\1\65"+
    "\6\13\1\66\3\13\14\0\21\13\2\0\5\13\1\67"+
    "\17\13\14\0\6\13\1\70\12\13\2\0\25\13\14\0"+
    "\12\13\1\71\6\13\2\0\25\13\14\0\16\13\1\72"+
    "\2\13\2\0\25\13\14\0\21\13\2\0\20\13\1\72"+
    "\4\13\14\0\21\13\2\0\10\13\1\73\14\13\14\0"+
    "\16\13\1\74\2\13\2\0\25\13\14\0\21\13\2\0"+
    "\17\13\1\75\5\13\14\0\2\13\1\76\16\13\2\0"+
    "\25\13\14\0\21\13\2\0\2\13\1\77\22\13\14\0"+
    "\21\13\2\0\4\13\1\100\11\13\1\101\6\13\45\0"+
    "\1\102\32\0\21\13\2\0\2\13\1\103\22\13\14\0"+
    "\21\13\2\0\23\13\1\104\1\13\14\0\21\13\2\0"+
    "\23\13\1\105\1\13\14\0\13\13\1\106\5\13\2\0"+
    "\25\13\14\0\15\13\1\107\3\13\2\0\25\13\14\0"+
    "\21\13\2\0\15\13\1\110\7\13\14\0\21\13\2\0"+
    "\4\13\1\111\20\13\14\0\21\13\2\0\10\13\1\112"+
    "\14\13\14\0\15\13\1\113\3\13\2\0\25\13\14\0"+
    "\20\13\1\114\2\0\25\13\12\0\1\115\1\0\21\13"+
    "\2\0\25\13\14\0\21\13\2\0\6\13\1\116\16\13"+
    "\14\0\13\13\1\117\5\13\2\0\25\13\14\0\21\13"+
    "\2\0\2\13\1\120\22\13\14\0\4\13\1\121\14\13"+
    "\2\0\25\13\14\0\21\13\2\0\4\13\1\122\20\13"+
    "\14\0\21\13\2\0\13\13\1\123\11\13\14\0\21\13"+
    "\2\0\15\13\1\124\7\13\61\0\1\125\16\0\21\13"+
    "\2\0\7\13\1\126\15\13\14\0\21\13\2\0\2\13"+
    "\1\127\22\13\14\0\21\13\2\0\1\130\24\13\14\0"+
    "\15\13\1\131\3\13\2\0\25\13\14\0\7\13\1\132"+
    "\11\13\2\0\25\13\14\0\21\13\2\0\17\13\1\133"+
    "\5\13\14\0\21\13\2\0\6\13\1\134\16\13\14\0"+
    "\21\13\2\0\2\13\1\135\22\13\14\0\4\13\1\136"+
    "\14\13\2\0\25\13\14\0\21\13\2\0\4\13\1\137"+
    "\20\13\14\0\16\13\1\140\2\13\2\0\25\13\14\0"+
    "\21\13\2\0\10\13\1\141\14\13\14\0\17\13\1\142"+
    "\1\13\2\0\25\13\14\0\21\13\2\0\21\13\1\143"+
    "\3\13\14\0\21\13\2\0\16\13\1\144\6\13\12\0"+
    "\1\145\1\0\21\13\2\0\25\13\57\0\1\146\20\0"+
    "\21\13\2\0\1\147\24\13\14\0\21\13\2\0\1\30"+
    "\24\13\14\0\21\13\2\0\20\13\1\30\4\13\14\0"+
    "\7\13\1\150\11\13\2\0\25\13\14\0\17\13\1\151"+
    "\1\13\2\0\25\13\14\0\21\13\2\0\24\13\1\152"+
    "\14\0\21\13\2\0\15\13\1\153\7\13\14\0\21\13"+
    "\2\0\22\13\1\154\2\13\14\0\3\13\1\155\15\13"+
    "\2\0\25\13\14\0\21\13\2\0\14\13\1\156\10\13"+
    "\12\0\1\157\1\0\21\13\2\0\25\13\14\0\21\13"+
    "\2\0\15\13\1\160\7\13\14\0\1\161\20\13\2\0"+
    "\25\13\14\0\21\13\2\0\1\162\24\13\14\0\21\13"+
    "\2\0\15\13\1\163\7\13\60\0\1\164\17\0\21\13"+
    "\2\0\17\13\1\165\5\13\14\0\1\166\20\13\2\0"+
    "\25\13\14\0\13\13\1\167\5\13\2\0\25\13\14\0"+
    "\21\13\2\0\1\170\24\13\14\0\21\13\2\0\17\13"+
    "\1\171\5\13\14\0\21\13\2\0\12\13\1\172\12\13"+
    "\14\0\7\13\1\173\11\13\2\0\25\13\12\0\1\174"+
    "\1\0\21\13\2\0\25\13\14\0\21\13\2\0\14\13"+
    "\1\175\10\13\14\0\16\13\1\176\2\13\2\0\25\13"+
    "\14\0\21\13\2\0\20\13\1\176\4\13\12\0\1\177"+
    "\1\0\21\13\2\0\25\13\54\0\1\200\23\0\21\13"+
    "\2\0\1\130\7\13\1\201\14\13\14\0\16\13\1\202"+
    "\2\13\2\0\25\13\12\0\1\203\1\0\21\13\2\0"+
    "\25\13\14\0\21\13\2\0\20\13\1\204\4\13\14\0"+
    "\21\13\2\0\24\13\1\205\14\0\21\13\2\0\21\13"+
    "\1\206\3\13\14\0\4\13\1\207\14\13\2\0\25\13"+
    "\14\0\21\13\2\0\4\13\1\210\20\13\14\0\21\13"+
    "\2\0\21\13\1\105\3\13\13\0\1\211\21\13\2\0"+
    "\25\13\12\0\1\212\1\0\21\13\2\0\25\13\14\0"+
    "\21\13\2\0\1\213\24\13\14\0\21\13\2\0\1\214"+
    "\24\13\14\0\12\13\1\215\6\13\2\0\25\13\14\0"+
    "\21\13\2\0\20\13\1\216\4\13\14\0\21\13\2\0"+
    "\20\13\1\217\4\13\14\0\21\13\2\0\3\13\1\220"+
    "\21\13\14\0\17\13\1\221\1\13\2\0\25\13\12\0"+
    "\1\222\1\0\21\13\2\0\25\13\12\0\1\223\1\0"+
    "\21\13\2\0\25\13\12\0\1\224\1\0\21\13\2\0"+
    "\25\13\14\0\4\13\1\225\14\13\2\0\25\13\14\0"+
    "\16\13\1\226\2\13\2\0\25\13\12\0\1\227\1\0"+
    "\21\13\2\0\25\13";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6552];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\2\1\2\11\11\1\2\11"+
    "\7\1\1\0\1\11\1\1\1\0\15\1\1\0\23\1"+
    "\1\0\12\1\1\11\7\1\1\0\17\1\1\11\1\0"+
    "\10\1\1\11\4\1\1\0\7\1\1\11\2\1\2\11"+
    "\2\1\1\11\5\1\2\11\7\1\3\11\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Carácter no reconocido: '" + yytext() + "' en línea " + (yyline+1) + ", columna " + (yycolumn+1));
            }
          // fall through
          case 28: break;
          case 2:
            { /* ignorar */
            }
          // fall through
          case 29: break;
          case 3:
            { return symbol(ParserSym.CM);
            }
          // fall through
          case 30: break;
          case 4:
            { return symbol(ParserSym.PTO);
            }
          // fall through
          case 31: break;
          case 5:
            { return symbol(ParserSym.NUM, Double.parseDouble(yytext()));
            }
          // fall through
          case 32: break;
          case 6:
            { return symbol(ParserSym.COL);
            }
          // fall through
          case 33: break;
          // fall through
          case 34: break;
          case 8:
            { return symbol(ParserSym.ID, yytext());
            }
          // fall through
          case 35: break;
          case 9:
            { return symbol(ParserSym.SO);
            }
          // fall through
          case 36: break;
          case 10:
            { return symbol(ParserSym.SC);
            }
          // fall through
          case 37: break;
          case 11:
            { return symbol(ParserSym.UNIDAD, yytext());
            }
          // fall through
          case 38: break;
          case 12:
            { return symbol(ParserSym.STRING, yytext().substring(1, yytext().length()-1));
            }
          // fall through
          case 39: break;
          case 13:
            { return symbol(ParserSym.MENU);
            }
          // fall through
          case 40: break;
          // fall through
          case 41: break;
          case 15:
            { return symbol(ParserSym.TIPO);
            }
          // fall through
          case 42: break;
          case 16:
            { return symbol(ParserSym.PASOS);
            }
          // fall through
          case 43: break;
          case 17:
            { return symbol(ParserSym.RECETA);
            }
          // fall through
          case 44: break;
          case 18:
            { return symbol(ParserSym.ORIGEN);
            }
          // fall through
          case 45: break;
          case 19:
            { return symbol(ParserSym.RECETAS);
            }
          // fall through
          case 46: break;
          case 20:
            { return symbol(ParserSym.TIEMPO);
            }
          // fall through
          case 47: break;
          case 21:
            { return symbol(ParserSym.CARRITO);
            }
          // fall through
          case 48: break;
          case 22:
            { return symbol(ParserSym.CALORIAS_EQ);
            }
          // fall through
          case 49: break;
          case 23:
            { return symbol(ParserSym.CALORIAS);
            }
          // fall through
          case 50: break;
          case 24:
            { return symbol(ParserSym.PORCIONES);
            }
          // fall through
          case 51: break;
          case 25:
            { return symbol(ParserSym.CATEGORIAS);
            }
          // fall through
          case 52: break;
          case 26:
            { return symbol(ParserSym.DIFICULTAD);
            }
          // fall through
          case 53: break;
          case 27:
            { return symbol(ParserSym.INGREDIENTES);
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
